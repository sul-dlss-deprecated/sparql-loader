# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details

version: 2
jobs:
  build:
    docker:
      # specify the version
      - image: circleci/golang:1.9
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    #### TEMPLATE_NOTE: go expects specific checkout path representing url
    #### expecting it in the form of
    ####   /go/src/github.com/circleci/go-tool
    ####   /go/src/bitbucket.org/circleci/go-tool
    working_directory: /go/src/github.com/sul-dlss-labs/sparql-loader
    steps:
      - checkout

      # specify any bash command here prefixed with `run: `
      - run: go get -v -t -d ./...
      - run: go test -v ./...
      - run: go get github.com/golang/dep/cmd/dep
      - run: dep ensure
      - run: GOOS=linux go build -o main

  deploy:
    docker:
      - image: circleci/golang:latest
    working_directory: /go/src/github.com/sul-dlss-labs/sparql-loader
    steps:
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get install -y python-pip libyaml-dev python-dev jq
            sudo pip install awscli
      - checkout
      - run: go get github.com/golang/dep/cmd/dep
      - run: dep ensure
      - run: GOOS=linux go build -o main
      - run: zip lambda.zip main
      - run:
          name: Upload to S3
          command: |
            mkdir ~/.aws
            echo -e "[rialto]\naws_access_key_id=$CIRCLE_ACCESS_KEY_ID\naws_secret_access_key=$CIRCLE_SECRET_KEY\n" > ~/.aws/credentials
            unset  AWS_SESSION_TOKEN
            temp_role=$(aws sts assume-role \
                  --role-session-name "DevelopersRole" \
                  --role-arn $DEV_ROLE_ARN \
                  --profile rialto)
            export AWS_ACCESS_KEY_ID=$(echo $temp_role | jq .Credentials.AccessKeyId | xargs)
            export AWS_SECRET_ACCESS_KEY=$(echo $temp_role | jq .Credentials.SecretAccessKey | xargs)
            export AWS_SESSION_TOKEN=$(echo $temp_role | jq .Credentials.SessionToken | xargs)
            aws configure set region $AWS_REGION
            aws configure set default.output json
            aws configure list  # Get confirmation it worked in your logs
            aws lambda update-function-code --function-name rialto-sparql-loader-development --zip-file fileb://lambda.zip

workflows:
  version: 2
  
  deploy-dev:
    jobs:
      - build:
          filters:
            branches:
              ignore: master
      - deploy:
          filters:
            branches:
              only: master